import * as Sharing from 'expo-sharing';
import { Alert } from 'react-native';
import type { InvoiceWithVendor, User } from '@invoicepe/types';

export interface PDFGenerationOptions {
  invoice: InvoiceWithVendor;
  user: User;
}

/**
 * Generate and share an invoice PDF
 * This is a placeholder implementation that will be enhanced in Phase 5
 */
export const generateAndShareInvoicePDF = async (options: PDFGenerationOptions): Promise<void> => {
  const { invoice, user } = options;
  
  try {
    // For now, we'll create a simple text representation
    // In Phase 5, this will be replaced with actual PDF generation
    const invoiceText = generateInvoiceText(invoice, user);

    // For now, we'll just show the sharing interface
    // In Phase 5, this will share the actual PDF
    if (await Sharing.isAvailableAsync()) {
      // Note: This is a placeholder - actual PDF sharing will be implemented in Phase 5
      console.log('PDF sharing will be implemented in Phase 5');
      console.log('Invoice text:', invoiceText);

      // For demonstration, we'll just show the invoice details
      Alert.alert(
        'PDF Preview',
        'PDF generation will be implemented in Phase 5. Invoice details logged to console.',
        [{ text: 'OK' }]
      );
    } else {
      throw new Error('Sharing is not available on this device');
    }
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
};

/**
 * Generate a text representation of the invoice
 * This will be replaced with proper PDF generation in Phase 5
 */
const generateInvoiceText = (invoice: InvoiceWithVendor, user: User): string => {
  const formatAmount = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 2,
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    });
  };

  return `
INVOICE
=======

From: ${user.business_name || 'Your Business'}
${user.gstin ? `GSTIN: ${user.gstin}` : ''}
Phone: ${user.phone}

To: ${invoice.vendors?.name || 'Unknown Vendor'}
Category: ${invoice.vendors?.vendor_categories?.name || 'No Category'}
${invoice.vendors?.phone ? `Phone: ${invoice.vendors.phone}` : ''}
${invoice.vendors?.upi_id ? `UPI ID: ${invoice.vendors.upi_id}` : ''}
${invoice.vendors?.bank_account ? `Bank Account: ${invoice.vendors.bank_account}` : ''}

Invoice Details:
================
Invoice ID: ${invoice.id}
Date: ${formatDate(invoice.created_at)}
Status: ${invoice.status.toUpperCase()}

${invoice.description ? `Description: ${invoice.description}` : ''}

Amount: ${formatAmount(invoice.amount)} ${invoice.currency}

---
Generated by InvoicePe
${formatDate(new Date().toISOString())}
  `.trim();
};

/**
 * Get the file name for the invoice PDF
 */
export const getInvoiceFileName = (invoice: InvoiceWithVendor): string => {
  const vendorName = invoice.vendors?.name?.replace(/[^a-zA-Z0-9]/g, '_') || 'Unknown';
  const date = new Date(invoice.created_at).toISOString().split('T')[0];
  const amount = invoice.amount.toFixed(0);
  
  return `Invoice_${vendorName}_${date}_${amount}.pdf`;
};

/**
 * Validate if PDF generation is possible
 */
export const canGeneratePDF = (): boolean => {
  // For now, always return true
  // In Phase 5, this will check for proper PDF generation capabilities
  return true;
};

/**
 * Get PDF generation status
 */
export const getPDFGenerationStatus = (): {
  available: boolean;
  message: string;
} => {
  return {
    available: true,
    message: 'PDF generation will be fully implemented in Phase 5. Currently showing text preview.',
  };
};
